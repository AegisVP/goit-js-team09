{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAIA,MAAMC,EAAO,CACVC,cAAeC,SAASC,cAAc,kCACtCC,QAASF,SAASC,cAAc,YAChCE,YAAaH,SAASC,cAAc,iCAMvCG,eAAeC,EAAYC,GACxB,MAEMC,EAAc,IAAIC,gBAAgB,CACrCC,QAAS,qCAGZ,aAAaC,EAAAC,GACZC,IAAI,sCAAcN,KAAUC,KACzBM,MAAKC,GACkB,MAApBA,EAASC,OACHC,QAAQC,OAAO,UAAUH,EAASI,WAElCJ,EAASK,OAErBC,OAAMC,GACGL,QAAQC,QAAOI,GAAMC,MAAM,8C,CAnBxCxB,EAAKC,cAAcwB,iBAAiB,QAASC,GAC7C1B,EAAKK,YAAYoB,iBAAiB,SAyFlC,WACGzB,EAAKK,YAAYsB,UAAUC,IAAI,kBAC/B5B,EAAKC,cAAc0B,UAAUE,OAAO,kBACpC7B,EAAKI,QAAQ0B,UAAY,GACzB,IAAIC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,gBACpD,GAAqB,MAAjBJ,EAGD,OAFA,EAAAjC,EAAAsC,UAAW,QACXpC,EAAKI,QAAQ0B,UAAY,mIAGzB,IAAK,IAAIO,EAAI,EAAGA,EAAIN,EAAcO,OAAQD,IACvC9B,EAAYwB,EAAcM,IAAItB,MAAOwB,IAClCvC,EAAKI,QAAQ0B,WAAa,kCAAkCS,EAAOC,gGAGjDC,EAAO,IAAKF,EAAOG,oBAAoBD,EAC/D,IAAKF,EAAOG,+EAEYD,EAAO,IAAKF,EAAOG,oBAAoBD,EAC/D,IAAKF,EAAOG,sFAGCD,EAAO,IAAKF,EAAOG,mMAODH,EAAOI,+FAENC,EAAcL,EAAOM,wDACjBN,EAAOO,aAAaC,MAAM,EAAG,gDAChCR,EAAOS,iDAEjC,KAIV,EAAAlD,EAAAsC,UAAW,E,IA1Gd,MAAMK,EAAS,CAACQ,EAAOP,IACbA,EACL,+BAAoCO,IAAQP,IAC5C,gCAAgCO,KACpB,IAARA,oCAIT,SAASvB,IACN1B,EAAKC,cAAc0B,UAAUC,IAAI,kBACjC5B,EAAKK,YAAYsB,UAAUE,OAAO,kBAClC7B,EAAKI,QAAQ0B,UAAY,GACzB,IAAIoB,EAAkBlB,KAAKC,MAAMC,aAAaC,QAAQ,kBACtD,GAAuB,MAAnBe,EAGD,OAFA,EAAApD,EAAAsC,UAAW,QACXpC,EAAKI,QAAQ0B,UAAY,mIAGzB,IAAK,IAAIO,EAAI,EAAGA,EAAIa,EAAgBZ,OAAQD,IACzC9B,EAAY2C,EAAgBb,IAAItB,MAAOwB,IACpCvC,EAAKI,QAAQ0B,WAAa,kCAAkCS,EAAOC,gGAGjDC,EAAO,IAAKF,EAAOG,oBAAoBD,EAC/D,IAAKF,EAAOG,+EAEYD,EAAO,IAAKF,EAAOG,oBAAoBD,EAC/D,IAAKF,EAAOG,sFAGCD,EAAO,IAAKF,EAAOG,mMAODH,EAAOI,+FAENC,EAAcL,EAAOM,wDACjBN,EAAOO,aAAaC,MAAM,EAAG,gDAChCR,EAAOS,iDAEjC,KAIV,EAAAlD,EAAAsC,UAAW,E,CAGd,SAASQ,EAAcO,GACpB,MAAMC,EAAapB,KAAKC,MAAMC,aAAaC,QAAQ,WAC7CU,EAAS,GACZ,IAAK,IAAIR,EAAI,EAAGA,EAAIc,EAAUb,OAAQD,IACtC,IAAK,IAAIgB,EAAI,EAAGA,EAAID,EAAWd,OAAQe,IAChCF,EAAUd,GAAGG,KAAOY,EAAWC,GAAGb,IACnCK,EAAOS,KAAKF,EAAWC,GAAGE,MAInC,OAAIV,EAAOP,QAAU,EACXO,EAAOE,MAAM,EAAE,GAAGS,KAAK,MAAQ,UAElCX,EAAOW,KAAK,K,CAxDnB9B","sources":["src/js/library.js"],"sourcesContent":["import showLoader from './loader';\nimport axios from 'axios';\n\n\nconst refs = {\n   watchedButton: document.querySelector('.btn-lib[aria-label=\"Watched\"]'),\n   gallery: document.querySelector('.gallery'),\n   queueButton: document.querySelector('.btn-lib[aria-label=\"Queue\"]')\n}\n\nrefs.watchedButton.addEventListener('click', innerWatchedList)\nrefs.queueButton.addEventListener('click', innerQueueList)\n\nasync function getFilmData(idFilm) {\n   const BASE_URL = 'https://api.themoviedb.org/3/movie/';\n\n   const searchParam = new URLSearchParams({\n      api_key: 'ad24807293275bef83ede161311e71e0'\n   })\n   \n   return await axios\n   .get(`${BASE_URL}${idFilm}?${searchParam}`)\n      .then(response => {\n      if (response.status !== 200) {\n         return Promise.reject(`Error: ${response.message}`);\n         }\n         return response.data;\n   })\n   .catch(err => {\n      return Promise.reject(err=> alert(\"Something wrong with request to server!\"));\n   });\n}\n\nconst imgSrc = (width, poster_path) => {\n   return poster_path\n   ? `${\"https://image.tmdb.org/t/p/\"}w${width}${poster_path}`\n   : ` https://via.placeholder.com/${width}x${\n         width * 1.5\n      }/fbf7f7c1/8c8c8c/?text=No+Poster`;\n};\n   innerWatchedList()\nfunction innerWatchedList() {\n   refs.watchedButton.classList.add('button--accent')\n   refs.queueButton.classList.remove('button--accent')\n   refs.gallery.innerHTML = '';\n   let dataWatchedFilm = JSON.parse(localStorage.getItem('watchedResult'));\n   if (dataWatchedFilm == null) {\n      showLoader(false)\n      refs.gallery.innerHTML = `<img src=\"https://cases.media/image/wide/54ce0f4a-2dbd-4745-acf9-cc9a8c349cfd.jpg\" max-width = \"1000px\" max-height = '700px'>`\n      return\n   } else {\n      for (let i = 0; i < dataWatchedFilm.length; i++) {\n         getFilmData(dataWatchedFilm[i]).then(( result ) => {\n            refs.gallery.innerHTML += `<div class=\"filmCard\" data-id=\"${result.id}\">\n         <div class=\"filmCard-thumb\">\n         <picture>\n            <source srcset=\"${imgSrc(300, result.poster_path)} 1x, ${imgSrc(\n      500, result.poster_path\n      )} 2x\" media=\"(max-width: 767px)\" />\n            <source srcset=\"${imgSrc(400, result.poster_path)} 1x, ${imgSrc(\n      500, result.poster_path\n      )} 2x\" media=\"(min-width: 768px)\" />\n            <img\n            src=\"${imgSrc(300, result.poster_path)}\"\n            width=\"280\"\n            height=\"398\"\n            alt=\"Film poster\"}>\n            </img>\n         </picture>\n         </div>\n         <p class=\"filmCard-title\">${result.title}</p>\n         <div class=\"filmCard-description\">\n         <p class=\"filmCard-genres\">${getFilmGenres(result.genres)}</p>\n            <p class=\"filmCard-release\">${result.release_date.slice(0, 4)}</p>\n            <p class=\"filmCard-rate\">${result.vote_average}</p>\n         </div>\n      </div>`;\n         });\n      }\n   }\n   showLoader(false)\n}\n\nfunction getFilmGenres(genre_ids) {\n   const genresList = JSON.parse(localStorage.getItem('genres'));\n   const genres = [];\n      for (let i = 0; i < genre_ids.length; i++) {\n      for (let j = 0; j < genresList.length; j++) {\n         if (genre_ids[i].id === genresList[j].id) {\n            genres.push(genresList[j].name)\n         }\n      }\n   }\n   if (genres.length >= 3) {\n      return genres.slice(0,2).join(', ') + \", Other\"\n   } else {\n   return genres.join(', ')\n   }\n}\n\nfunction innerQueueList() {\n   refs.queueButton.classList.add('button--accent')\n   refs.watchedButton.classList.remove('button--accent')\n   refs.gallery.innerHTML = '';\n   let dataQueueFilm = JSON.parse(localStorage.getItem('queueResult'));\n   if (dataQueueFilm == null) {\n      showLoader(false)\n      refs.gallery.innerHTML = `<img src=\"https://cases.media/image/wide/54ce0f4a-2dbd-4745-acf9-cc9a8c349cfd.jpg\" max-width = \"1000px\" max-height = '700px'>`\n      return\n   } else {\n      for (let i = 0; i < dataQueueFilm.length; i++) {\n         getFilmData(dataQueueFilm[i]).then(( result ) => {\n            refs.gallery.innerHTML += `<div class=\"filmCard\" data-id=\"${result.id}\">\n         <div class=\"filmCard-thumb\">\n         <picture>\n            <source srcset=\"${imgSrc(300, result.poster_path)} 1x, ${imgSrc(\n      500, result.poster_path\n      )} 2x\" media=\"(max-width: 767px)\" />\n            <source srcset=\"${imgSrc(400, result.poster_path)} 1x, ${imgSrc(\n      500, result.poster_path\n      )} 2x\" media=\"(min-width: 768px)\" />\n            <img\n            src=\"${imgSrc(300, result.poster_path)}\"\n            width=\"280\"\n            height=\"398\"\n            alt=\"Film poster\"}>\n            </img>\n         </picture>\n         </div>\n         <p class=\"filmCard-title\">${result.title}</p>\n         <div class=\"filmCard-description\">\n         <p class=\"filmCard-genres\">${getFilmGenres(result.genres)}</p>\n            <p class=\"filmCard-release\">${result.release_date.slice(0, 4)}</p>\n            <p class=\"filmCard-rate\">${result.vote_average}</p>\n         </div>\n      </div>`;\n         });\n      }\n   }\n   showLoader(false)\n}"],"names":["$gjiCh","parcelRequire","$1cafa503bc57b7a0$var$refs","watchedButton","document","querySelector","gallery","queueButton","async","$1cafa503bc57b7a0$var$getFilmData","idFilm","searchParam","URLSearchParams","api_key","$parcel$interopDefault","$2shzp","get","then","response","status","Promise","reject","message","data","catch","err","alert","addEventListener","$1cafa503bc57b7a0$var$innerWatchedList","classList","add","remove","innerHTML","dataQueueFilm","JSON","parse","localStorage","getItem","default","i","length","result","id","$1cafa503bc57b7a0$var$imgSrc","poster_path","title","$1cafa503bc57b7a0$var$getFilmGenres","genres","release_date","slice","vote_average","width","dataWatchedFilm","genre_ids","genresList","j","push","name","join"],"version":3,"file":"library.75fb07ee.js.map"}